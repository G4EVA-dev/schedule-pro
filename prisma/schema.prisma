// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  name           String?
  firstName      String
  lastName       String
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  businesses     Business[]
  sessions       Session[]
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Business {
  id        String   @id @default(uuid())
  name      String
  ownerId   String
  timezone  String   @default("UTC")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  services  Service[]
  staff     Staff[]
}

model Service {
  id          String   @id @default(uuid())
  name        String
  description String?
  duration    Int      // in minutes
  price       Float
  businessId  String
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  bookings    Booking[]
}

model Staff {
  id         String   @id @default(uuid())
  name       String
  email      String
  phone      String?
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  services   Service[]
  bookings   Booking[]
}

model Booking {
  id         String   @id @default(uuid())
  customerName  String
  customerEmail String
  customerPhone String?
  date       DateTime
  endDate    DateTime
  status     String   @default("pending") // pending, confirmed, cancelled, completed
  notes      String?
  serviceId  String
  staffId    String
  businessId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  service    Service  @relation(fields: [serviceId], references: [id])
  staff      Staff    @relation(fields: [staffId], references: [id])
  business   Business @relation(fields: [businessId], references: [id])
}
